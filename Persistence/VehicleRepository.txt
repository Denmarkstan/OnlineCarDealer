using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Vega.Models;
using Vega.Core;

namespace Vega.Persistence {
    public class VehicleRepository : IVehicleRepository
    {
        private readonly VegaDbContext context;
        public VehicleRepository (VegaDbContext context) {
            this.context = context;

        }
        public async Task<Vehicle> GetVehicle (int id,bool incudeRelated=true) 
        {
             if(!incudeRelated)
            return await context.Vehicles.FindAsync(id);
            return await context.Vehicles.Include (v => v.Features)
                .ThenInclude (vf => vf.Feature)
                .Include (v => v.Model)
                .ThenInclude (m => m.Make)
                .SingleOrDefaultAsync (v => v.Id == id);
        }
        public async Task<Model> GetModel (int id) 
        {             
           
            return await context.Models.SingleOrDefaultAsync (m => m.Id==id);
        }

        public void AddVehicle(Vehicle vehicle)
        {
           context.Vehicles.Add(vehicle);
          
        }
      public void RemoveVehicle(Vehicle vehicle)
        {
           context.Vehicles.Remove(vehicle);
        
        }
    }
}